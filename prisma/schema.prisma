//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// main.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// activity.prisma
//

model Activity {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  user      User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  type      ActivityType
  metadata  Json
}

enum ActivityType {
  BOOK_ADDED
  BOOK_UPDATED
  BOOK_DELETED
  BOOK_BORROWED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
}

//
// auth.prisma
//

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique

  emailConfirmationRequest EmailConfirmationRequest?
  session                  Session[]

  userBookReadingState UserBookReadingState[]

  permissionGroupId Int
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id])

  activities Activity[]
}

model EmailConfirmationRequest {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expireDate DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Session {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expireDate DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  permissionGroups PermissionGroup[]
}

model PermissionGroup {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  permissions Permission[]
  users       User[]
}

model UserBookReadingState {
  userId Int
  user   User @relation(fields: [userId], references: [id])
  bookId Int
  book   Book @relation(fields: [bookId], references: [id])

  state ReadingState

  @@id([userId, bookId])
}

enum ReadingState {
  READING
  READ
}

//
// book.prisma
//

model Book {
  id Int @id @default(autoincrement())

  isbn            String  @unique
  title           String
  subtitle        String?
  number_of_pages Int?

  publish_date  PublishDate? @relation(fields: [publishDateId], references: [id])
  publishDateId Int?

  isbn10 String? @unique
  isbn13 String? @unique

  front_image Boolean @default(false)
  back_image  Boolean @default(false)

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  language   Language? @relation(fields: [languageId], references: [id])
  languageId Int?

  authors              Author[]
  publishers           Publisher[]
  subjects             Subject[]
  userBookReadingState UserBookReadingState[]
}

model PublishDate {
  id    Int    @id @default(autoincrement())
  year  Int
  month Int?
  day   Int?
  Book  Book[]
}

model Location {
  id    Int    @id @default(autoincrement())
  value String @unique

  books Book[]
}

model Language {
  id    Int    @id @default(autoincrement())
  value String @unique

  books Book[]
}

model Author {
  id   Int    @id @default(autoincrement())
  name String @unique

  books Book[]
}

model Publisher {
  id   Int    @id @default(autoincrement())
  name String @unique

  books Book[]
}

model Subject {
  id    Int    @id @default(autoincrement())
  value String @unique

  books Book[]
}
