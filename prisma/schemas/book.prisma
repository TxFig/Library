import { UserBookReadingState } from "reading-state"
import { User } from "auth"
import { UserBookRating } from "rating"


model Book {
    id Int @id @default(autoincrement())

    isbn            String  @unique // also acts as opaque id
    title           String
    subtitle        String?
    number_of_pages Int?

    publish_date PublishDate?

    isbn10 String? @unique
    isbn13 String? @unique

    image Image[]

    location   Location? @relation(fields: [locationId], references: [id])
    locationId Int?

    language   Language? @relation(fields: [languageId], references: [id])
    languageId Int?

    authors              Author[]
    publishers           Publisher[]
    subjects             Subject[]
    userBookReadingState UserBookReadingState[]

    owner   User?   @relation(fields: [ownerId], references: [id])
    ownerId Int?

    bookCollections BookCollection[]

    userBookRating UserBookRating[]
}

model Image {
    id Int @id @default(autoincrement())

    bookId Int
    Book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

    width  Int
    height Int

    createdAt DateTime @default(now())
}

model PublishDate {
    id    Int  @id @default(autoincrement())
    year  Int
    month Int?
    day   Int?

    book   Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId Int  @unique
}

model Location {
    id    Int    @id @default(autoincrement())
    value String @unique

    books Book[]
}

model Language {
    id    Int    @id @default(autoincrement())
    value String @unique

    books Book[]
}

model Author {
    id   Int    @id @default(autoincrement())
    name String @unique

    books Book[]
}

model Publisher {
    id   Int    @id @default(autoincrement())
    name String @unique

    books Book[]
}

model Subject {
    id    Int    @id @default(autoincrement())
    value String @unique

    books Book[]
}

model BookCollection {
    id   Int    @id @default(autoincrement())
    name String

    books Book[]

    ownerId Int
    owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}
