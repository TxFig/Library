import { Book, BookCollection } from "book"
import { LogEntry } from "logging"
import { UserBookReadingState } from "reading-state"


model User {
    id       Int    @id @default(autoincrement())
    opaqueId String @unique

    email          String  @unique
    username       String  @unique
    profilePicture Boolean @default(false)

    emailConfirmationRequest EmailConfirmationRequest?
    session                  Session[]

    userBookReadingState UserBookReadingState[]

    permissionGroupId Int
    permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id])

    userSettings UserSettings?

    books           Book[]
    bookCollections BookCollection[]

    LogEntry LogEntry[]
}



model UserSettings {
    id Int @id @default(autoincrement())

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    visibleReadingState Boolean @default(false)
}

model EmailConfirmationRequest {
    id         Int      @id @default(autoincrement())
    token      String   @unique
    expireDate DateTime

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique
}

model Session {
    id         Int      @id @default(autoincrement())
    token      String   @unique
    expireDate DateTime

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
    id          Int    @id @default(autoincrement())
    name        String @unique
    description String

    permissionGroups PermissionGroup[]
}

model PermissionGroup {
    id          Int    @id @default(autoincrement())
    name        String @unique
    description String

    permissions Permission[]
    users       User[]
}
